// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/09/2020 16:37:19"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    secretkey
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module secretkey_vlg_sample_tst(
	clk,
	i_counter,
	secret_key_input,
	start,
	sampler_tx
);
input  clk;
input [7:0] i_counter;
input [23:0] secret_key_input;
input  start;
output sampler_tx;

reg sample;
time current_time;
always @(clk or i_counter or secret_key_input or start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module secretkey_vlg_check_tst (
	finish,
	hex0,
	hex1,
	hex2,
	hex3,
	hex4,
	hex5,
	secret_key_value,
	state,
	sampler_rx
);
input  finish;
input [3:0] hex0;
input [3:0] hex1;
input [3:0] hex2;
input [3:0] hex3;
input [3:0] hex4;
input [3:0] hex5;
input [7:0] secret_key_value;
input [3:0] state;
input sampler_rx;

reg  finish_expected;
reg [3:0] hex0_expected;
reg [3:0] hex1_expected;
reg [3:0] hex2_expected;
reg [3:0] hex3_expected;
reg [3:0] hex4_expected;
reg [3:0] hex5_expected;
reg [7:0] secret_key_value_expected;
reg [3:0] state_expected;

reg  finish_prev;
reg [3:0] hex0_prev;
reg [3:0] hex1_prev;
reg [3:0] hex2_prev;
reg [3:0] hex3_prev;
reg [3:0] hex4_prev;
reg [3:0] hex5_prev;
reg [7:0] secret_key_value_prev;
reg [3:0] state_prev;

reg  finish_expected_prev;
reg [7:0] secret_key_value_expected_prev;
reg [3:0] state_expected_prev;

reg  last_finish_exp;
reg [7:0] last_secret_key_value_exp;
reg [3:0] last_state_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	finish_prev = finish;
	hex0_prev = hex0;
	hex1_prev = hex1;
	hex2_prev = hex2;
	hex3_prev = hex3;
	hex4_prev = hex4;
	hex5_prev = hex5;
	secret_key_value_prev = secret_key_value;
	state_prev = state;
end

// update expected /o prevs

always @(trigger)
begin
	finish_expected_prev = finish_expected;
	secret_key_value_expected_prev = secret_key_value_expected;
	state_expected_prev = state_expected;
end



// expected finish
initial
begin
	finish_expected = 1'bX;
end 
// expected secret_key_value[ 7 ]
initial
begin
	secret_key_value_expected[7] = 1'bX;
end 
// expected secret_key_value[ 6 ]
initial
begin
	secret_key_value_expected[6] = 1'bX;
end 
// expected secret_key_value[ 5 ]
initial
begin
	secret_key_value_expected[5] = 1'bX;
end 
// expected secret_key_value[ 4 ]
initial
begin
	secret_key_value_expected[4] = 1'bX;
end 
// expected secret_key_value[ 3 ]
initial
begin
	secret_key_value_expected[3] = 1'bX;
end 
// expected secret_key_value[ 2 ]
initial
begin
	secret_key_value_expected[2] = 1'bX;
end 
// expected secret_key_value[ 1 ]
initial
begin
	secret_key_value_expected[1] = 1'bX;
end 
// expected secret_key_value[ 0 ]
initial
begin
	secret_key_value_expected[0] = 1'bX;
end 
// expected state[ 3 ]
initial
begin
	state_expected[3] = 1'bX;
end 
// expected state[ 2 ]
initial
begin
	state_expected[2] = 1'bX;
end 
// expected state[ 1 ]
initial
begin
	state_expected[1] = 1'bX;
end 
// expected state[ 0 ]
initial
begin
	state_expected[0] = 1'bX;
end 
// generate trigger
always @(finish_expected or finish or hex0_expected or hex0 or hex1_expected or hex1 or hex2_expected or hex2 or hex3_expected or hex3 or hex4_expected or hex4 or hex5_expected or hex5 or secret_key_value_expected or secret_key_value or state_expected or state)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected finish = %b | expected hex0 = %b | expected hex1 = %b | expected hex2 = %b | expected hex3 = %b | expected hex4 = %b | expected hex5 = %b | expected secret_key_value = %b | expected state = %b | ",finish_expected_prev,hex0_expected_prev,hex1_expected_prev,hex2_expected_prev,hex3_expected_prev,hex4_expected_prev,hex5_expected_prev,secret_key_value_expected_prev,state_expected_prev);
	$display("| real finish = %b | real hex0 = %b | real hex1 = %b | real hex2 = %b | real hex3 = %b | real hex4 = %b | real hex5 = %b | real secret_key_value = %b | real state = %b | ",finish_prev,hex0_prev,hex1_prev,hex2_prev,hex3_prev,hex4_prev,hex5_prev,secret_key_value_prev,state_prev);
`endif
	if (
		( finish_expected_prev !== 1'bx ) && ( finish_prev !== finish_expected_prev )
		&& ((finish_expected_prev !== last_finish_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finish :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finish_expected_prev);
		$display ("     Real value = %b", finish_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finish_exp = finish_expected_prev;
	end
	if (
		( secret_key_value_expected_prev[0] !== 1'bx ) && ( secret_key_value_prev[0] !== secret_key_value_expected_prev[0] )
		&& ((secret_key_value_expected_prev[0] !== last_secret_key_value_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port secret_key_value[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", secret_key_value_expected_prev);
		$display ("     Real value = %b", secret_key_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_secret_key_value_exp[0] = secret_key_value_expected_prev[0];
	end
	if (
		( secret_key_value_expected_prev[1] !== 1'bx ) && ( secret_key_value_prev[1] !== secret_key_value_expected_prev[1] )
		&& ((secret_key_value_expected_prev[1] !== last_secret_key_value_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port secret_key_value[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", secret_key_value_expected_prev);
		$display ("     Real value = %b", secret_key_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_secret_key_value_exp[1] = secret_key_value_expected_prev[1];
	end
	if (
		( secret_key_value_expected_prev[2] !== 1'bx ) && ( secret_key_value_prev[2] !== secret_key_value_expected_prev[2] )
		&& ((secret_key_value_expected_prev[2] !== last_secret_key_value_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port secret_key_value[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", secret_key_value_expected_prev);
		$display ("     Real value = %b", secret_key_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_secret_key_value_exp[2] = secret_key_value_expected_prev[2];
	end
	if (
		( secret_key_value_expected_prev[3] !== 1'bx ) && ( secret_key_value_prev[3] !== secret_key_value_expected_prev[3] )
		&& ((secret_key_value_expected_prev[3] !== last_secret_key_value_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port secret_key_value[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", secret_key_value_expected_prev);
		$display ("     Real value = %b", secret_key_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_secret_key_value_exp[3] = secret_key_value_expected_prev[3];
	end
	if (
		( secret_key_value_expected_prev[4] !== 1'bx ) && ( secret_key_value_prev[4] !== secret_key_value_expected_prev[4] )
		&& ((secret_key_value_expected_prev[4] !== last_secret_key_value_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port secret_key_value[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", secret_key_value_expected_prev);
		$display ("     Real value = %b", secret_key_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_secret_key_value_exp[4] = secret_key_value_expected_prev[4];
	end
	if (
		( secret_key_value_expected_prev[5] !== 1'bx ) && ( secret_key_value_prev[5] !== secret_key_value_expected_prev[5] )
		&& ((secret_key_value_expected_prev[5] !== last_secret_key_value_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port secret_key_value[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", secret_key_value_expected_prev);
		$display ("     Real value = %b", secret_key_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_secret_key_value_exp[5] = secret_key_value_expected_prev[5];
	end
	if (
		( secret_key_value_expected_prev[6] !== 1'bx ) && ( secret_key_value_prev[6] !== secret_key_value_expected_prev[6] )
		&& ((secret_key_value_expected_prev[6] !== last_secret_key_value_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port secret_key_value[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", secret_key_value_expected_prev);
		$display ("     Real value = %b", secret_key_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_secret_key_value_exp[6] = secret_key_value_expected_prev[6];
	end
	if (
		( secret_key_value_expected_prev[7] !== 1'bx ) && ( secret_key_value_prev[7] !== secret_key_value_expected_prev[7] )
		&& ((secret_key_value_expected_prev[7] !== last_secret_key_value_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port secret_key_value[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", secret_key_value_expected_prev);
		$display ("     Real value = %b", secret_key_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_secret_key_value_exp[7] = secret_key_value_expected_prev[7];
	end
	if (
		( state_expected_prev[0] !== 1'bx ) && ( state_prev[0] !== state_expected_prev[0] )
		&& ((state_expected_prev[0] !== last_state_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_state_exp[0] = state_expected_prev[0];
	end
	if (
		( state_expected_prev[1] !== 1'bx ) && ( state_prev[1] !== state_expected_prev[1] )
		&& ((state_expected_prev[1] !== last_state_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_state_exp[1] = state_expected_prev[1];
	end
	if (
		( state_expected_prev[2] !== 1'bx ) && ( state_prev[2] !== state_expected_prev[2] )
		&& ((state_expected_prev[2] !== last_state_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_state_exp[2] = state_expected_prev[2];
	end
	if (
		( state_expected_prev[3] !== 1'bx ) && ( state_prev[3] !== state_expected_prev[3] )
		&& ((state_expected_prev[3] !== last_state_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_state_exp[3] = state_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module secretkey_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] i_counter;
reg [23:0] secret_key_input;
reg start;
// wires                                               
wire finish;
wire [3:0] hex0;
wire [3:0] hex1;
wire [3:0] hex2;
wire [3:0] hex3;
wire [3:0] hex4;
wire [3:0] hex5;
wire [7:0] secret_key_value;
wire [3:0] state;

wire sampler;                             

// assign statements (if any)                          
secretkey i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.finish(finish),
	.hex0(hex0),
	.hex1(hex1),
	.hex2(hex2),
	.hex3(hex3),
	.hex4(hex4),
	.hex5(hex5),
	.i_counter(i_counter),
	.secret_key_input(secret_key_input),
	.secret_key_value(secret_key_value),
	.start(start),
	.state(state)
);

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 
// i_counter[ 7 ]
initial
begin
	i_counter[7] = 1'b0;
end 
// i_counter[ 6 ]
initial
begin
	i_counter[6] = 1'b0;
	i_counter[6] = #640000 1'b1;
end 
// i_counter[ 5 ]
initial
begin
	i_counter[5] = 1'b0;
	i_counter[5] = #320000 1'b1;
	i_counter[5] = #320000 1'b0;
	i_counter[5] = #320000 1'b1;
end 
// i_counter[ 4 ]
initial
begin
	repeat(3)
	begin
		i_counter[4] = 1'b0;
		i_counter[4] = #160000 1'b1;
		# 160000;
	end
	i_counter[4] = 1'b0;
end 
// i_counter[ 3 ]
initial
begin
	repeat(6)
	begin
		i_counter[3] = 1'b0;
		i_counter[3] = #80000 1'b1;
		# 80000;
	end
	i_counter[3] = 1'b0;
end 
// i_counter[ 2 ]
initial
begin
	repeat(12)
	begin
		i_counter[2] = 1'b0;
		i_counter[2] = #40000 1'b1;
		# 40000;
	end
	i_counter[2] = 1'b0;
end 
// i_counter[ 1 ]
always
begin
	i_counter[1] = 1'b0;
	i_counter[1] = #20000 1'b1;
	#20000;
end 
// i_counter[ 0 ]
always
begin
	i_counter[0] = 1'b0;
	i_counter[0] = #10000 1'b1;
	#10000;
end 
// secret_key_input[ 23 ]
initial
begin
	secret_key_input[23] = 1'b1;
	secret_key_input[23] = #50000 1'b0;
	secret_key_input[23] = #150000 1'b1;
	secret_key_input[23] = #300000 1'b0;
	secret_key_input[23] = #150000 1'b1;
	secret_key_input[23] = #50000 1'b0;
	secret_key_input[23] = #150000 1'b1;
	secret_key_input[23] = #50000 1'b0;
	secret_key_input[23] = #50000 1'b1;
end 
// secret_key_input[ 22 ]
initial
begin
	secret_key_input[22] = 1'b0;
	secret_key_input[22] = #250000 1'b1;
	secret_key_input[22] = #50000 1'b0;
	secret_key_input[22] = #150000 1'b1;
	secret_key_input[22] = #50000 1'b0;
	secret_key_input[22] = #100000 1'b1;
	secret_key_input[22] = #200000 1'b0;
	secret_key_input[22] = #100000 1'b1;
end 
// secret_key_input[ 21 ]
initial
begin
	secret_key_input[21] = 1'b0;
	secret_key_input[21] = #50000 1'b1;
	secret_key_input[21] = #50000 1'b0;
	secret_key_input[21] = #50000 1'b1;
	secret_key_input[21] = #100000 1'b0;
	secret_key_input[21] = #150000 1'b1;
	secret_key_input[21] = #100000 1'b0;
	secret_key_input[21] = #200000 1'b1;
	secret_key_input[21] = #100000 1'b0;
	secret_key_input[21] = #50000 1'b1;
	secret_key_input[21] = #100000 1'b0;
end 
// secret_key_input[ 20 ]
initial
begin
	secret_key_input[20] = 1'b0;
	secret_key_input[20] = #50000 1'b1;
	secret_key_input[20] = #200000 1'b0;
	secret_key_input[20] = #150000 1'b1;
	secret_key_input[20] = #50000 1'b0;
	secret_key_input[20] = #100000 1'b1;
	secret_key_input[20] = #100000 1'b0;
	secret_key_input[20] = #50000 1'b1;
	secret_key_input[20] = #100000 1'b0;
end 
// secret_key_input[ 19 ]
initial
begin
	secret_key_input[19] = 1'b1;
	secret_key_input[19] = #100000 1'b0;
	secret_key_input[19] = #50000 1'b1;
	secret_key_input[19] = #50000 1'b0;
	secret_key_input[19] = #50000 1'b1;
	secret_key_input[19] = #150000 1'b0;
	secret_key_input[19] = #50000 1'b1;
	secret_key_input[19] = #50000 1'b0;
	secret_key_input[19] = #50000 1'b1;
	secret_key_input[19] = #100000 1'b0;
	secret_key_input[19] = #200000 1'b1;
	secret_key_input[19] = #50000 1'b0;
end 
// secret_key_input[ 18 ]
initial
begin
	secret_key_input[18] = 1'b1;
	secret_key_input[18] = #100000 1'b0;
	secret_key_input[18] = #150000 1'b1;
	secret_key_input[18] = #50000 1'b0;
	secret_key_input[18] = #50000 1'b1;
	secret_key_input[18] = #150000 1'b0;
	secret_key_input[18] = #150000 1'b1;
	secret_key_input[18] = #50000 1'b0;
	secret_key_input[18] = #50000 1'b1;
	secret_key_input[18] = #50000 1'b0;
	secret_key_input[18] = #150000 1'b1;
end 
// secret_key_input[ 17 ]
initial
begin
	secret_key_input[17] = 1'b0;
	secret_key_input[17] = #150000 1'b1;
	secret_key_input[17] = #50000 1'b0;
	secret_key_input[17] = #100000 1'b1;
	secret_key_input[17] = #50000 1'b0;
	secret_key_input[17] = #100000 1'b1;
	secret_key_input[17] = #100000 1'b0;
	secret_key_input[17] = #350000 1'b1;
	secret_key_input[17] = #50000 1'b0;
end 
// secret_key_input[ 16 ]
initial
begin
	secret_key_input[16] = 1'b0;
	secret_key_input[16] = #50000 1'b1;
	secret_key_input[16] = #50000 1'b0;
	secret_key_input[16] = #50000 1'b1;
	secret_key_input[16] = #100000 1'b0;
	secret_key_input[16] = #200000 1'b1;
	secret_key_input[16] = #50000 1'b0;
	secret_key_input[16] = #50000 1'b1;
	secret_key_input[16] = #100000 1'b0;
	secret_key_input[16] = #50000 1'b1;
	secret_key_input[16] = #100000 1'b0;
	secret_key_input[16] = #50000 1'b1;
	secret_key_input[16] = #50000 1'b0;
end 
// secret_key_input[ 15 ]
initial
begin
	secret_key_input[15] = 1'b0;
	secret_key_input[15] = #100000 1'b1;
	secret_key_input[15] = #200000 1'b0;
	secret_key_input[15] = #50000 1'b1;
	secret_key_input[15] = #50000 1'b0;
	secret_key_input[15] = #150000 1'b1;
	secret_key_input[15] = #100000 1'b0;
	secret_key_input[15] = #100000 1'b1;
	secret_key_input[15] = #50000 1'b0;
	secret_key_input[15] = #50000 1'b1;
end 
// secret_key_input[ 14 ]
initial
begin
	secret_key_input[14] = 1'b1;
	secret_key_input[14] = #150000 1'b0;
	secret_key_input[14] = #100000 1'b1;
	secret_key_input[14] = #50000 1'b0;
	secret_key_input[14] = #50000 1'b1;
	secret_key_input[14] = #150000 1'b0;
	secret_key_input[14] = #50000 1'b1;
	secret_key_input[14] = #100000 1'b0;
	secret_key_input[14] = #50000 1'b1;
	secret_key_input[14] = #50000 1'b0;
	secret_key_input[14] = #50000 1'b1;
	secret_key_input[14] = #50000 1'b0;
	secret_key_input[14] = #100000 1'b1;
end 
// secret_key_input[ 13 ]
initial
begin
	secret_key_input[13] = 1'b0;
	secret_key_input[13] = #300000 1'b1;
	secret_key_input[13] = #100000 1'b0;
	secret_key_input[13] = #100000 1'b1;
	secret_key_input[13] = #50000 1'b0;
	secret_key_input[13] = #150000 1'b1;
	secret_key_input[13] = #50000 1'b0;
	secret_key_input[13] = #100000 1'b1;
	secret_key_input[13] = #100000 1'b0;
end 
// secret_key_input[ 12 ]
initial
begin
	secret_key_input[12] = 1'b0;
	secret_key_input[12] = #100000 1'b1;
	secret_key_input[12] = #250000 1'b0;
	secret_key_input[12] = #100000 1'b1;
	secret_key_input[12] = #200000 1'b0;
	secret_key_input[12] = #50000 1'b1;
	secret_key_input[12] = #50000 1'b0;
end 
// secret_key_input[ 11 ]
initial
begin
	secret_key_input[11] = 1'b0;
	secret_key_input[11] = #50000 1'b1;
	secret_key_input[11] = #50000 1'b0;
	secret_key_input[11] = #150000 1'b1;
	secret_key_input[11] = #50000 1'b0;
	secret_key_input[11] = #250000 1'b1;
	secret_key_input[11] = #400000 1'b0;
end 
// secret_key_input[ 10 ]
initial
begin
	secret_key_input[10] = 1'b0;
	secret_key_input[10] = #100000 1'b1;
	secret_key_input[10] = #100000 1'b0;
	secret_key_input[10] = #300000 1'b1;
	secret_key_input[10] = #50000 1'b0;
	secret_key_input[10] = #100000 1'b1;
	secret_key_input[10] = #50000 1'b0;
	secret_key_input[10] = #100000 1'b1;
	secret_key_input[10] = #100000 1'b0;
	secret_key_input[10] = #50000 1'b1;
end 
// secret_key_input[ 9 ]
initial
begin
	secret_key_input[9] = 1'b0;
	secret_key_input[9] = #200000 1'b1;
	secret_key_input[9] = #50000 1'b0;
	secret_key_input[9] = #50000 1'b1;
	secret_key_input[9] = #50000 1'b0;
	secret_key_input[9] = #300000 1'b1;
	secret_key_input[9] = #50000 1'b0;
	secret_key_input[9] = #100000 1'b1;
end 
// secret_key_input[ 8 ]
initial
begin
	secret_key_input[8] = 1'b1;
	secret_key_input[8] = #50000 1'b0;
	secret_key_input[8] = #150000 1'b1;
	secret_key_input[8] = #100000 1'b0;
	secret_key_input[8] = #50000 1'b1;
	secret_key_input[8] = #100000 1'b0;
	secret_key_input[8] = #50000 1'b1;
	secret_key_input[8] = #50000 1'b0;
	secret_key_input[8] = #100000 1'b1;
	secret_key_input[8] = #100000 1'b0;
	secret_key_input[8] = #50000 1'b1;
	secret_key_input[8] = #100000 1'b0;
	secret_key_input[8] = #50000 1'b1;
end 
// secret_key_input[ 7 ]
initial
begin
	secret_key_input[7] = 1'b0;
	secret_key_input[7] = #50000 1'b1;
	secret_key_input[7] = #50000 1'b0;
	secret_key_input[7] = #50000 1'b1;
	secret_key_input[7] = #100000 1'b0;
	secret_key_input[7] = #50000 1'b1;
	secret_key_input[7] = #50000 1'b0;
	secret_key_input[7] = #50000 1'b1;
	secret_key_input[7] = #100000 1'b0;
	secret_key_input[7] = #100000 1'b1;
	secret_key_input[7] = #50000 1'b0;
	secret_key_input[7] = #50000 1'b1;
	secret_key_input[7] = #50000 1'b0;
	secret_key_input[7] = #100000 1'b1;
	secret_key_input[7] = #100000 1'b0;
end 
// secret_key_input[ 6 ]
initial
begin
	secret_key_input[6] = 1'b1;
	secret_key_input[6] = #150000 1'b0;
	secret_key_input[6] = #50000 1'b1;
	secret_key_input[6] = #50000 1'b0;
	secret_key_input[6] = #100000 1'b1;
	secret_key_input[6] = #100000 1'b0;
	secret_key_input[6] = #100000 1'b1;
	secret_key_input[6] = #100000 1'b0;
	secret_key_input[6] = #200000 1'b1;
	secret_key_input[6] = #50000 1'b0;
end 
// secret_key_input[ 5 ]
initial
begin
	secret_key_input[5] = 1'b1;
	secret_key_input[5] = #100000 1'b0;
	secret_key_input[5] = #200000 1'b1;
	secret_key_input[5] = #150000 1'b0;
	secret_key_input[5] = #50000 1'b1;
	secret_key_input[5] = #100000 1'b0;
	secret_key_input[5] = #150000 1'b1;
	secret_key_input[5] = #50000 1'b0;
	secret_key_input[5] = #50000 1'b1;
	secret_key_input[5] = #100000 1'b0;
end 
// secret_key_input[ 4 ]
initial
begin
	secret_key_input[4] = 1'b0;
	secret_key_input[4] = #50000 1'b1;
	secret_key_input[4] = #200000 1'b0;
	secret_key_input[4] = #150000 1'b1;
	secret_key_input[4] = #100000 1'b0;
	secret_key_input[4] = #50000 1'b1;
	secret_key_input[4] = #200000 1'b0;
	secret_key_input[4] = #50000 1'b1;
	secret_key_input[4] = #50000 1'b0;
	secret_key_input[4] = #100000 1'b1;
end 
// secret_key_input[ 3 ]
initial
begin
	secret_key_input[3] = 1'b0;
	secret_key_input[3] = #150000 1'b1;
	secret_key_input[3] = #50000 1'b0;
	secret_key_input[3] = #100000 1'b1;
	secret_key_input[3] = #50000 1'b0;
	secret_key_input[3] = #50000 1'b1;
	secret_key_input[3] = #100000 1'b0;
	secret_key_input[3] = #50000 1'b1;
	secret_key_input[3] = #100000 1'b0;
	secret_key_input[3] = #50000 1'b1;
	secret_key_input[3] = #50000 1'b0;
end 
// secret_key_input[ 2 ]
initial
begin
	secret_key_input[2] = 1'b0;
	secret_key_input[2] = #100000 1'b1;
	secret_key_input[2] = #50000 1'b0;
	secret_key_input[2] = #50000 1'b1;
	secret_key_input[2] = #50000 1'b0;
	secret_key_input[2] = #50000 1'b1;
	secret_key_input[2] = #150000 1'b0;
	secret_key_input[2] = #100000 1'b1;
	secret_key_input[2] = #50000 1'b0;
	secret_key_input[2] = #50000 1'b1;
	secret_key_input[2] = #50000 1'b0;
	secret_key_input[2] = #150000 1'b1;
end 
// secret_key_input[ 1 ]
initial
begin
	secret_key_input[1] = 1'b1;
	secret_key_input[1] = #100000 1'b0;
	secret_key_input[1] = #50000 1'b1;
	secret_key_input[1] = #50000 1'b0;
	secret_key_input[1] = #50000 1'b1;
	secret_key_input[1] = #50000 1'b0;
	secret_key_input[1] = #50000 1'b1;
	secret_key_input[1] = #50000 1'b0;
	secret_key_input[1] = #100000 1'b1;
	secret_key_input[1] = #250000 1'b0;
	secret_key_input[1] = #150000 1'b1;
	secret_key_input[1] = #50000 1'b0;
end 
// secret_key_input[ 0 ]
initial
begin
	secret_key_input[0] = 1'b1;
	secret_key_input[0] = #50000 1'b0;
	secret_key_input[0] = #200000 1'b1;
	secret_key_input[0] = #50000 1'b0;
	secret_key_input[0] = #50000 1'b1;
	secret_key_input[0] = #100000 1'b0;
	secret_key_input[0] = #50000 1'b1;
	secret_key_input[0] = #300000 1'b0;
	secret_key_input[0] = #150000 1'b1;
end 

// start
initial
begin
	start = 1'b1;
end 

secretkey_vlg_sample_tst tb_sample (
	.clk(clk),
	.i_counter(i_counter),
	.secret_key_input(secret_key_input),
	.start(start),
	.sampler_tx(sampler)
);

secretkey_vlg_check_tst tb_out(
	.finish(finish),
	.hex0(hex0),
	.hex1(hex1),
	.hex2(hex2),
	.hex3(hex3),
	.hex4(hex4),
	.hex5(hex5),
	.secret_key_value(secret_key_value),
	.state(state),
	.sampler_rx(sampler)
);
endmodule

